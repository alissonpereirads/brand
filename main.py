import streamlit as st
from agent import create_agent, ask_agent
import os

# Configura칞칚o da p치gina
st.set_page_config(page_title="Analisador de Dados em Excel", page_icon="游늵")

# T칤tulo da aplica칞칚o
st.title("Brand Analisador de Dados em Excel 游늵")

# Descri칞칚o
st.write(
    """
Esta aplica칞칚o permite que voc칡 fa칞a perguntas sobre seus dados em Excel e obtenha respostas instant칙neas.
Carregue seu arquivo Excel e comece a explorar!
"""
)


# Fun칞칚o para excluir o arquivo tempor치rio, se existir
def limpar_arquivo_temporario():
    if os.path.exists("temp_file.xlsx"):
        os.remove("temp_file.xlsx")
        print("Arquivo tempor치rio exclu칤do.")


# Limpa o arquivo tempor치rio ao iniciar a aplica칞칚o
limpar_arquivo_temporario()

# Upload do arquivo Excel
uploaded_file = st.file_uploader("Carregue seu arquivo Excel", type=["xlsx"])
st.markdown("---")

# Inicializa a lista de perguntas e respostas na sess칚o do Streamlit
if "historico" not in st.session_state:
    st.session_state.historico = []

if uploaded_file is not None:
    # Exclui o arquivo tempor치rio anterior, se existir
    limpar_arquivo_temporario()

    # Salva o arquivo carregado temporariamente
    with open("temp_file.xlsx", "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Cria ou recria o agente com o novo arquivo carregado
    st.session_state.agent = create_agent(path="temp_file.xlsx")

    # Exibe o hist칩rico de perguntas e respostas usando st.chat_message
    if len(st.session_state.historico) > 0:
        st.write("### Hist칩rico de Perguntas e Respostas")
        for i, item in enumerate(st.session_state.historico):
            # Exibe o n칰mero da pergunta
            st.markdown(f"**{i+1}춹 Pergunta**")

            # Exibe a pergunta do usu치rio
            with st.chat_message("user"):
                st.markdown(f"**Pergunta:** {item['pergunta']}")

            # Exibe a resposta do agente
            with st.chat_message("assistant"):
                st.markdown(f"**Resposta:** {item['resposta']}")

            st.markdown("---")  # Linha divis칩ria entre itens

        # Bot칚o para limpar o hist칩rico (s칩 aparece se houver hist칩rico)
        if st.button("Limpar Hist칩rico"):
            st.session_state.historico = []
            st.rerun()

    # Campo de entrada para perguntas usando st.chat_input
    if prompt := st.chat_input("Fa칞a uma pergunta sobre os dados:"):
        # Obt칠m a resposta do agente
        resposta = ask_agent(st.session_state.agent, prompt)

        # Verifica se a resposta 칠 um dicion치rio e extrai o valor correto
        if isinstance(resposta, dict) and "output" in resposta:
            resposta_formatada = resposta["output"]
        else:
            resposta_formatada = str(resposta)  # Converte a resposta para string

        # Adiciona a pergunta e a resposta ao hist칩rico
        st.session_state.historico.append(
            {"pergunta": prompt, "resposta": resposta_formatada}
        )

        # For칞a a atualiza칞칚o da interface com a fun칞칚o correta
        st.rerun()
else:
    st.warning("Por favor, carregue um arquivo Excel para come칞ar.")
